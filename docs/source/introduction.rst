Введение
========
Проект GeekPlanner является учебным и предназначен для изучения фреймворков Django и Vue. Настоятельно не рекомендуется
использовать его в серьёзных и коммерческих проектах. Стабильность работы не гарантируется!

Задача, которая ставилась перед проектом, заключается в реализации базового функционала Kanban-досок. Если Вам не
известно данное понятие, то рекомендуется посмотреть такие проекты, как Trello и KanbanFlow. Сущность досок состоит в
возможности планирования и распределения задач по категориям с указанием их важности и сопутствующей информации. В
IT-компаниях, где есть разделение обязанностей среди команды разработчиков, использование таких досок является обычным
делом, без которого процесс планирования и разработки был бы намного сложнее.

Что уже реализовано?
====================
На текущем этапе есть следующие возможности:

* Двухфакторная аутентификация пользователей с использованием JWT (JSON Web Token).
* Создание/Модификация/Удаление проектов, в которых имеется kanban-доска.
* Создание/Модификация/Удаление и перемещение по категориям карочек.
* Разграничение прав доступа к проектам и их содержимому между пользователями: если проект является частным,
  то посторонние пользователи не увидят его в списке доступных и не смогут его посмотреть.
* Возможность присоединяться и уходить из публичных проектов, созданных другими пользователями.

Стек технологий
===============
Приложение разбито на две составные части: фронтенд и бэкенд, каждая из которых, по сути, является самостоятельным
приложением. Изначально приложение реализовывалось на чистом python и Django, а фронтенд рендерился тоже Django из
html-template'ов. Это было удобно для начала, потому что всё работало "из коробки" и не требовало дополнительных пакетов
для установки. Но на определённом этапе потребовалась "динамика" на страницах, а ререндерить страницы целиком - довольно
дорогая операция. В таком случае на помощь приходит AJAX с асинхронными запросами и лишь частичным ререндерингом. jQuery
хорошая вещь и планирвалось именно данную библиотеку и использовать, но в определённый момент потребовалось создание
шаблонов html-странц которые имели бы вложенность одна в другую с необходимостью использования параметров и циклов.
Django-template-language не очень удобен в плане выполнения сложных махинаций с данными в шаблоне. Для более продвинутых
вещей приходится во Views писать довольно сложные запросы для составления ``dict`` для передачи в шаблон. Это было не
очень удобно. На помощь пришёл Vue.js с компонентной структурой и отсутствием окраничений по наследованию (в отличие от
Django, где может быть только родительский и дочерний шаблон). Далее приведён весь стек технологий, который на текущий
момент используется в проекте.

Frontend:

* **Vue.js** - использован в качестве фронтэнд-фреймворка. Он довольно минималистичен и наиболее простой в изучении по
  сравнению с другими фреймворками (Angular и React.js).
* **Node.js** - среда для выполнения JavaScript кода вне браузера.
* **NPM** - пакетный менеджер, который поставляется вместе с Node.js.
* **Webpack** - сборщик модулей построенный на Node.js.
* **ESlint** - JavaScript линтер. Для проекта использовал стиль Airbnb.
* **vue-form-generator** - небольшая библиотка для генерации форм с необходимыми полями. В GeekPlanner используется практи-
  чески везде: регистрация, создание проектов, работа с карточками и т.п.
* **Axios** - библиотека http-запросов, которая используется для обращения к API Django REST на бэкенде.
* **Vuex** - библиотека, которая помогает упростить написание больших проектов за счёт хранения и изменения состояния
  переменных в отдельной реестре (``Vuex.store``).
* **Vue-router** - пакет для навигации по веб-сайту. Даёт возможность передачи аргументов в компоенты Vue, а также имеет
  поля для метаданных, которые я использовал для проверки необходимости авторизации пользователя.

Backend:

* **PostgreSQL** - мощная СУБД. Для работы с ней использую приложение **pgAdmin**.
* **Django** - использован в качестве бэкэнд-фреймворка. Предоставляет достаточный инструментарий, а также имеет большое
  количество дополнительных пакетов.
* **djangorestframework** - пакет для написания RESTful API на Django.
* **django-cors-headers** - пакет для обработки заголовков HTTP-запросов, необходимых для CORS. В данном проекте нужен
  для взаимодейстия фронтэнда и бэкэнда. В отсутствие данного пакета, сделать запрос к RESTful API будет невозможен.
* **Djoser** - пакет, который используется для аутентификации пользователей с помощью JWT (JSON Web Token).
* **djangorestframework-simplejwt** - пакет, встроенный в Djoser, и предоставляющий endpoint'ы для создания, проверки и
  удаления токенов.
* **pylint** - линтер для бэкэнда.
* **pylint-django** - плагин для PyLint, адаптирующий его под работу с фреймворком Django.
* **psycopg2-binary** - адаптер PostgreSQL для Python. Использую готовую сборку.
* **Pillow** - пакет для работы с графикой. Используется в Django для полей ``ImageField()``.




